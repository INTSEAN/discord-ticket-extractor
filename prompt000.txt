Ignore any previous versions of the files: background.js, eslint.config.js, vite.config.js, manifest.json

Below is the current state of the codebase file-by-file.
===========================================================================.

File 'background.js':
```
/**
 * Background script for Discord Conversation Extractor (Service Worker in Manifest V3)
 * Handles background operations, data storage, and communication between components
 */
console.log('Discord Conversation Extractor background script loaded');

// Store for conversations
let conversations = [];

/**
 * Handles extension installation and updates
 * Sets up storage and configures the side panel
 * @param {Object} details - Installation details including reason
 */
chrome.runtime.onInstalled.addListener((details) => {
  console.log('Extension installed:', details.reason);
  
  // Initialize empty conversations in storage
  chrome.storage.local.set({ conversations: [] });
  
  // Set up side panel
  if (chrome.sidePanel) {
    chrome.sidePanel.setPanelBehavior({ openPanelOnActionClick: true })
      .catch(err => console.error('Error setting side panel behavior:', err));
  }
});

/**
 * Monitors tab updates to detect Discord pages and inject content scripts
 * Only injects scripts on relevant pages and in the complete loading state
 * Ensures helpers.js is loaded before contentScript.js
 * @param {number} tabId - ID of the updated tab
 * @param {Object} changeInfo - Information about the change
 * @param {Object} tab - Tab object with URL and other properties
 */
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
  // Only inject our content script on Discord and tickettool.xyz pages
  if (changeInfo.status === 'complete' && tab.url) {
    const isTicketToolPage = tab.url.includes('tickettool.xyz/transcript');
    
    if (isTicketToolPage) {
      console.log('Discord or TicketTool page updated:', tab.url);
      
      // Inject helpers.js first, then contentScript.js
      chrome.scripting.executeScript({
        target: { tabId: tabId },
        files: ['src/helpers.js']
      })
      .then(() => {
        // After helpers are loaded, load the content script
        return chrome.scripting.executeScript({
          target: { tabId: tabId },
          files: ['src/contentScript.js']
        });
      })
      .catch(err => console.error('Content script injection error:', err));
    }
  }
});

/**
 * Formats conversation data for clipboard
 * Creates a clean multi-line representation of all messages
 * @param {Array<Object>} conversations - Array of conversation objects
 * @returns {string} Formatted text suitable for clipboard
 */
function formatConversationsForClipboard(conversations) {
  return conversations.map(conv => 
    `${conv.username}: ${conv.content} sent at "${conv.timestamp}"`
  ).join('\n');
}

/**
 * Handle messages from content scripts and other extension components
 * Supports multiple actions: saveConversations, getStoredConversations, 
 * conversationsUpdated, openSidePanel, and copyToClipboard
 * Some handlers are asynchronous and keep the message channel open
 * @param {Object} message - The incoming message with action and data
 * @param {Object} sender - Information about the message sender
 * @param {Function} sendResponse - Callback function to respond to the sender
 * @returns {boolean} True to keep the message channel open for async responses
 */
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  console.log('Message received:', message);
  
  if (message.action === 'saveConversations' && message.data) {
    const conversationsData = message.data.conversations || message.data;
  
    console.log('Saving conversations data:', conversationsData);
  
    // Save current conversations (for UI use, etc.)
    chrome.storage.local.set({ conversations: conversationsData }, () => {
      console.log('Current conversations saved.');
    });
  
    // Update history
    chrome.storage.local.get(['history'], (result) => {
      const previousHistory = result.history || [];
      const newHistory = [...previousHistory, ...conversationsData.map(c => ({
        username: c.username,
        content: c.content,
        timestamp: c.timestamp,
        server_name: c.serverName || '' // Ensure it's renamed to match your spec
      }))];
  
      chrome.storage.local.set({ history: newHistory }, () => {
        console.log('History updated with new ticket entries.');
  
        // Notify other parts (e.g., side panel) that conversations were updated
        chrome.runtime.sendMessage({ action: 'conversationsUpdated' });
      });
    });
  
    sendResponse({ success: true });
  }
  
  
  if (message.action === 'getStoredConversations') {
    // Get from storage and send
    chrome.storage.local.get('conversations', (data) => {
      console.log('Retrieving conversations from storage:', data.conversations);
      sendResponse({ conversations: data.conversations || [] });
    });
    return true; // Keep the message channel open for async response
  }
  
  if (message.action === 'conversationsUpdated') {
    // Simply relay the message to all listeners (including sidepanel)
    chrome.runtime.sendMessage({
      action: 'conversationsUpdated'
    });
    sendResponse({ success: true });
  }
  
  if (message.action === 'openSidePanel') {
    if (chrome.sidePanel) {
      // Try to open side panel
      chrome.sidePanel.open().catch(err => {
        console.error('Error opening side panel:', err);
      });
    } else {
      console.error('Side panel API not available');
    }
    sendResponse({ success: !!chrome.sidePanel });
  }
  
  if (message.action === 'copyToClipboard' && message.data) {
    // This won't work directly in the background script due to Manifest V3 restrictions
    // Instead, we'll send a message back to the content script to handle it
    // We're keeping this handler for future compatibility
    console.log('Clipboard operation requested, but must be handled by content script');
    sendResponse({ success: false, message: 'Clipboard operations must be handled by content script' });
  }
  
  return true; // Keep channel open by default
}); 
```

File 'eslint.config.js':
```
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

```

File 'vite.config.js':
```
import { defineConfig } from 'vite'
import { resolve } from 'path'
import { writeFileSync, copyFileSync, mkdirSync, existsSync } from 'fs'

// https://vite.dev/config/
export default defineConfig({
  build: {
    outDir: 'dist',
    emptyOutDir: true,
    rollupOptions: {
      input: {
        main: resolve(__dirname, 'index.html'),
        sidepanel: resolve(__dirname, 'sidepanel.html')
      }
    }
  },
  plugins: [
    {
      name: 'generate-chrome-extension-files',
      closeBundle() {
        // Ensure the dist/src directory exists
        const srcDir = resolve(__dirname, 'dist/src');
        if (!existsSync(srcDir)) {
          mkdirSync(srcDir, { recursive: true });
        }
        
        // Copy the manifest.json file
        copyFileSync(resolve(__dirname, 'manifest.json'), resolve(__dirname, 'dist/manifest.json'));
        
        // Copy the content script and helpers (helpers first)
        copyFileSync(resolve(__dirname, 'src/helpers.js'), resolve(__dirname, 'dist/src/helpers.js'));
        copyFileSync(resolve(__dirname, 'src/contentScript.js'), resolve(__dirname, 'dist/src/contentScript.js'));
        copyFileSync(resolve(__dirname, 'src/sidepanel.js'), resolve(__dirname, 'dist/src/sidepanel.js'));
        
        // Copy background.js from root directory instead of generating it
        copyFileSync(resolve(__dirname, 'background.js'), resolve(__dirname, 'dist/background.js'));
        
        // Create assets directory and copy icons
        const assetsDir = resolve(__dirname, 'dist/src/assets');
        if (!existsSync(assetsDir)) {
          mkdirSync(assetsDir, { recursive: true });
        }
        
        // Copy icon files if they exist
        const iconFiles = ['discord_16.png', 'discord_48.png', 'discord_128.png', 'discord_icon.png'];
        iconFiles.forEach(icon => {
          const iconPath = resolve(__dirname, `src/assets/${icon}`);
          if (existsSync(iconPath)) {
            copyFileSync(
              iconPath, 
              resolve(__dirname, `dist/src/assets/${icon}`)
            );
          }
        });
        
        console.log('Chrome Extension build completed successfully!');
      }
    }
  ]
})

```

File 'manifest.json':
```
{
  "manifest_version": 3,
  "name": "Discord Conversation Extractor",
  "description": "Extract and display conversations from Discord embeds",
  "version": "1.0.0",
  "action": {
    "default_popup": "index.html",
    "default_icon": {
      "16": "src/assets/discord_16.png",
      "48": "src/assets/discord_48.png",
      "128": "src/assets/discord_128.png"
    }
  },
  "background": {
    "service_worker": "background.js",
    "type": "module"
  },
  "permissions": [
    "tabs",
    "scripting",
    "storage",
    "sidePanel",
    "clipboardWrite"
  ],
  "host_permissions": [
    "https://*.discord.com/*",
    "https://tickettool.xyz/*",
    "https://api.tickettool.xyz/*"
  ],
  "content_scripts": [
    {
      "matches": [
        "https://*.discord.com/*",
        "https://tickettool.xyz/transcript*",
        "https://api.tickettool.xyz/api/legacy/transcript*"
      ],
      "js": ["src/helpers.js", "src/contentScript.js"],
      "all_frames": true
    }
  ],
  "web_accessible_resources": [
    {
      "resources": ["src/assets/discord.svg"],
      "matches": ["https://tickettool.xyz/*", "https://api.tickettool.xyz/*"]
    }
  ],
  "icons": {
    "16": "src/assets/discord_16.png",
    "48": "src/assets/discord_48.png",
    "128": "src/assets/discord_128.png"
  },
  "side_panel": {
    "default_path": "sidepanel.html"
  }
} 
```

===========================================================================.

